// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboard  Billboard[] @relation("StoreToBillboards")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  categories Category[]  @relation("StoreToCategory")
  Products   Product[]   @relation("StoreToProducts")
  order      Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboards", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String     @id @default(uuid())
  storeId     String
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard  @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Product[]  @relation("CategoryToProducts")
  Varients    Varients[]
  Varients    Varients[]

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String       @id @default(uuid())
  storeId    String
  store      Store        @relation("StoreToProducts", fields: [storeId], references: [id])
  categoryId String
  category   Category     @relation("CategoryToProducts", fields: [categoryId], references: [id])
  name       String
  mPrice     Decimal
  gstRate    Decimal
  price      Decimal
  isFeatured Boolean      @default(false)
  isArchived Boolean      @default(false)
  images     Image[]
  orderItem  OrderItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Varients   Varients[]
  PriceTable PriceTable[]
  Varients   Varients[]
  PriceTable PriceTable[]

  @@index([storeId])
  @@index([categoryId])
}

model VarientTypes {
  id      String @id @default(uuid())
  varient String
}

model Varients {
  id             String    @id @default(uuid())
  productId      String
  product        Product   @relation("PriceTableToProduct", fields: [productId], references: [id])
  varientTypesId String
  varientTypes   Category  @relation("varientTypes", fields: [varientTypesId], references: [id])
  varient        String
  Category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     String?
  Product        Product   @relation(fields: [productId], references: [id])
}

model PriceTable {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation("PriceTableToProduct", fields: [productId], references: [id])
  varient   String
  price     Decimal
  Product   Product @relation(fields: [productId], references: [id])
}

model Image {
  id         String   @id @default(uuid())
  productsId String
  product    Product  @relation(fields: [productsId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productsId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
